{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"netcon-problem-management-subsystem This document is built with mkdocs and mkdocs-material . You can build HTML-based documentation with this command. pipenv run mkdocs serve","title":"netcon-problem-management-subsystem"},{"location":"#netcon-problem-management-subsystem","text":"This document is built with mkdocs and mkdocs-material . You can build HTML-based documentation with this command. pipenv run mkdocs serve","title":"netcon-problem-management-subsystem"},{"location":"access-helper/","text":"access-helper access-helper helps us to access containers in ContainerLab with various ways. Currently, access-helper supports these access methods: exec: access nodes with docker exec ssh: access nodes through SSH getting started with access-helper You can build access-helper with the following command: make access-helper-build In this tutorial, we use the following ContainerLab topology file. name: testlab topology: nodes: n1: kind: linux image: alpine:latest n2: kind: linux image: linuxserver/openssh-server:latest env: USER_NAME: netcon USER_PASSWORD: netcon123 PASSWORD_ACCESS: true labels: netcon.janog.gr.jp/accessMethod: ssh netcon.janog.gr.jp/username: netcon netcon.janog.gr.jp/password: netcon123 netcon.janog.gr.jp/port: 2222 links: - endpoints: [\"n1:eth1\",\"n2:eth1\"] First, deploy this topology on your own machine. $ sudo clab -t manifest.yaml deploy INFO[0000] Containerlab v0.32.1 started INFO[0000] Parsing & checking topology file: manifest.yaml WARN[0000] it appears that container host has low memory available: ~0Gi. This might lead to runtime errors. Consider freeing up more memory. INFO[0000] Creating lab directory: /home/jp26081/test/clab-testlab INFO[0000] Creating container: \"n2\" INFO[0000] Creating container: \"n1\" INFO[0000] Creating virtual wire: n1:eth1 <--> n2:eth1 INFO[0001] Adding containerlab host entries to /etc/hosts file INFO[0001] \ud83c\udf89 New containerlab version 0.32.3 is available! Release notes: https://containerlab.dev/rn/0.32/#0323 Run 'containerlab version upgrade' to upgrade or go check other installation options at https://containerlab.dev/install/ +---+-----------------+--------------+-----------------------------------+-------+---------+-----------------+----------------------+ | # | Name | Container ID | Image | Kind | State | IPv4 Address | IPv6 Address | +---+-----------------+--------------+-----------------------------------+-------+---------+-----------------+----------------------+ | 1 | clab-testlab-n1 | 40ee1d4cc8f0 | alpine:latest | linux | running | 172.20.20.14/24 | 2001:172:20:20::e/64 | | 2 | clab-testlab-n2 | d9501e6790e7 | linuxserver/openssh-server:latest | linux | running | 172.20.20.15/24 | 2001:172:20:20::f/64 | +---+-----------------+--------------+-----------------------------------+-------+---------+-----------------+----------------------+ And then, you can access nodes with access-helper. Note that you need to execute access-helper with sudo privileges because access-helper needs to execute containerlab inspect to fetch management IP addresses for nodes. $ sudo ../access-helper -t manifest.yaml n1 / # echo \"Hello world!\" Hello world! / # $ sudo ../access-helper -t manifest.yaml n2 Welcome to OpenSSH Server n2:~$ echo \"Hello world!\" Hello world! n2:~$ logout Configuration You can configure how to access nodes via labels field in ContainerLab topology files. netcon.janog.gr.jp/accessMethod You can change how to access nodes with this label. Here are the acceptable values: \"exec\": access nodes with docker exec \"ssh\": access nodes through SSH If you don't set this label, \"ssh\" access method will be used. netcon.janog.gr.jp/adminOnly You can reject access from normal user to specific nodes with this label. \"true\" is the only acceptable value and other values will be considered as \"false\". If you don't set this label, both normal user and admin user can access nodes. netcon.janog.gr.jp/username You can set user name for SSH with this label. This label will be ignored when you use \"exec\" access method. netcon.janog.gr.jp/password You can set password for SSH with this label. This label will be ignored when you use \"exec\" access method. netcon.janog.gr.jp/port You can set password for SSH with this label. This label will be ignored when you use \"exec\" access method. If you don't set this label, 22/tcp is used to access nodes.","title":"Access Helper"},{"location":"access-helper/#access-helper","text":"access-helper helps us to access containers in ContainerLab with various ways. Currently, access-helper supports these access methods: exec: access nodes with docker exec ssh: access nodes through SSH","title":"access-helper"},{"location":"access-helper/#getting-started-with-access-helper","text":"You can build access-helper with the following command: make access-helper-build In this tutorial, we use the following ContainerLab topology file. name: testlab topology: nodes: n1: kind: linux image: alpine:latest n2: kind: linux image: linuxserver/openssh-server:latest env: USER_NAME: netcon USER_PASSWORD: netcon123 PASSWORD_ACCESS: true labels: netcon.janog.gr.jp/accessMethod: ssh netcon.janog.gr.jp/username: netcon netcon.janog.gr.jp/password: netcon123 netcon.janog.gr.jp/port: 2222 links: - endpoints: [\"n1:eth1\",\"n2:eth1\"] First, deploy this topology on your own machine. $ sudo clab -t manifest.yaml deploy INFO[0000] Containerlab v0.32.1 started INFO[0000] Parsing & checking topology file: manifest.yaml WARN[0000] it appears that container host has low memory available: ~0Gi. This might lead to runtime errors. Consider freeing up more memory. INFO[0000] Creating lab directory: /home/jp26081/test/clab-testlab INFO[0000] Creating container: \"n2\" INFO[0000] Creating container: \"n1\" INFO[0000] Creating virtual wire: n1:eth1 <--> n2:eth1 INFO[0001] Adding containerlab host entries to /etc/hosts file INFO[0001] \ud83c\udf89 New containerlab version 0.32.3 is available! Release notes: https://containerlab.dev/rn/0.32/#0323 Run 'containerlab version upgrade' to upgrade or go check other installation options at https://containerlab.dev/install/ +---+-----------------+--------------+-----------------------------------+-------+---------+-----------------+----------------------+ | # | Name | Container ID | Image | Kind | State | IPv4 Address | IPv6 Address | +---+-----------------+--------------+-----------------------------------+-------+---------+-----------------+----------------------+ | 1 | clab-testlab-n1 | 40ee1d4cc8f0 | alpine:latest | linux | running | 172.20.20.14/24 | 2001:172:20:20::e/64 | | 2 | clab-testlab-n2 | d9501e6790e7 | linuxserver/openssh-server:latest | linux | running | 172.20.20.15/24 | 2001:172:20:20::f/64 | +---+-----------------+--------------+-----------------------------------+-------+---------+-----------------+----------------------+ And then, you can access nodes with access-helper. Note that you need to execute access-helper with sudo privileges because access-helper needs to execute containerlab inspect to fetch management IP addresses for nodes. $ sudo ../access-helper -t manifest.yaml n1 / # echo \"Hello world!\" Hello world! / # $ sudo ../access-helper -t manifest.yaml n2 Welcome to OpenSSH Server n2:~$ echo \"Hello world!\" Hello world! n2:~$ logout","title":"getting started with access-helper"},{"location":"access-helper/#configuration","text":"You can configure how to access nodes via labels field in ContainerLab topology files.","title":"Configuration"},{"location":"access-helper/#netconjanoggrjpaccessmethod","text":"You can change how to access nodes with this label. Here are the acceptable values: \"exec\": access nodes with docker exec \"ssh\": access nodes through SSH If you don't set this label, \"ssh\" access method will be used.","title":"netcon.janog.gr.jp/accessMethod"},{"location":"access-helper/#netconjanoggrjpadminonly","text":"You can reject access from normal user to specific nodes with this label. \"true\" is the only acceptable value and other values will be considered as \"false\". If you don't set this label, both normal user and admin user can access nodes.","title":"netcon.janog.gr.jp/adminOnly"},{"location":"access-helper/#netconjanoggrjpusername","text":"You can set user name for SSH with this label. This label will be ignored when you use \"exec\" access method.","title":"netcon.janog.gr.jp/username"},{"location":"access-helper/#netconjanoggrjppassword","text":"You can set password for SSH with this label. This label will be ignored when you use \"exec\" access method.","title":"netcon.janog.gr.jp/password"},{"location":"access-helper/#netconjanoggrjpport","text":"You can set password for SSH with this label. This label will be ignored when you use \"exec\" access method. If you don't set this label, 22/tcp is used to access nodes.","title":"netcon.janog.gr.jp/port"},{"location":"devenv/","text":"How to set up a development environment This page describes how to set up a development environment like the following. Prerequisites You need to prepare Linux VM (Ubuntu 22.04 is preferable) You need to install build-essential . Installing prerequisites To set up a development environment, you need to install the following items: Golang Docker kind kubectl Golang All controllers in netcon-problem-management-subsystem are written in Golang. First, to develop controllers, you need to install Golang development environment. wget https://go.dev/dl/go1.19.2.linux-amd64.tar.gz sudo rm -rf /usr/local/go && sudo tar -C /usr/local -xzf go1.19.2.linux-amd64.tar.gz echo 'export PATH=$PATH:/usr/local/go/bin' >> ~/.bashrc . ~/.bashrc Docker In order to run Kubernetes cluster on your machine and run nclet, you need to install Docker. curl -L https://get.docker.com | sudo sh If you'd like to execute docker without sudo command, you can add your user to docker group. sudo usermod -aG docker \"$(id -un)\" kind kind is a handy tool to run Kubernetes clusters on your local machine. curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.16.0/kind-linux-amd64 chmod +x ./kind sudo mv ./kind /usr/local/bin/kind kubectl Of course, to communicate with Kubernetes, you need to install kubectl. curl -LO \"https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl\" chmod +x kubectl && sudo mv kubectl /usr/local/bin Deploying managers First, you need to set up a Kubernetes cluster to run controllers. kind create cluster Next, you need to install cert-manager to generate and inject self-signed certificates for controller-manager. kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.9.1/cert-manager.yaml Then, you can build and install managers with these commands. git submodule update --init make controller-manager-docker-build nclet-docker-build gateway-docker-build make controller-manager-kind-push gateway-kind-push Finally, you can deploy managers with this command. make deploy You can check the status of managers with kubectl -n netcon get pods . $ kubectl -n netcon get pods NAME READY STATUS RESTARTS AGE netcon-controller-manager-6b49cb47fb-mn967 2/2 Running 0 9d netcon-gateway-fdccf68c5-x9vpb 1/1 Running 0 7m (optional) Setting up LoadBalancer If you try managers which require external connectivity like Gateway, you need to set up LoadBalancer. First, you need to install MetalLB. kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.13.7/config/manifests/metallb-native.yaml Then, you need to configure MetalLB. You can configure MetalLB with helper script. ./scripts/generate_metallb_manifest.sh | kubectl apply -f - Finally, you can create LoadBalancer freely. $ cat service.yaml apiVersion: v1 kind: Service metadata: namespace: netcon name: gateway spec: type: LoadBalancer selector: control-plane: gateway ports: - port: 8082 targetPort: 8082 $ kubectl apply -f service.yaml service/gateway created $ kubectl -n netcon get svc NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE gateway LoadBalancer 10.96.196.144 172.18.0.200 8082:30483/TCP 11s netcon-controller-manager-metrics-service ClusterIP 10.96.233.209 <none> 8443/TCP 17d netcon-webhook-service ClusterIP 10.96.239.112 <none> 443/TCP 17d $ curl 172.18.0.200:8082 Gateway for score server ref: https://kind.sigs.k8s.io/docs/user/loadbalancer/ Deploying nclet After deploying managers successfully, you can install nclet with these command. Note that workers can communicate with Kubernetes controll plane. kind get kubeconfig > kubeconfig sudo mkdir /data && sudo chmod 0777 ./data ./scripts/refresh_nclet.sh Now, you can deploy ContainerLab environment with this system. To try it, apply ./config/samples/netcon_v1alpha1_problemenvironment.yaml .","title":"Development Environment"},{"location":"devenv/#how-to-set-up-a-development-environment","text":"This page describes how to set up a development environment like the following.","title":"How to set up a development environment"},{"location":"devenv/#prerequisites","text":"You need to prepare Linux VM (Ubuntu 22.04 is preferable) You need to install build-essential .","title":"Prerequisites"},{"location":"devenv/#installing-prerequisites","text":"To set up a development environment, you need to install the following items: Golang Docker kind kubectl Golang All controllers in netcon-problem-management-subsystem are written in Golang. First, to develop controllers, you need to install Golang development environment. wget https://go.dev/dl/go1.19.2.linux-amd64.tar.gz sudo rm -rf /usr/local/go && sudo tar -C /usr/local -xzf go1.19.2.linux-amd64.tar.gz echo 'export PATH=$PATH:/usr/local/go/bin' >> ~/.bashrc . ~/.bashrc Docker In order to run Kubernetes cluster on your machine and run nclet, you need to install Docker. curl -L https://get.docker.com | sudo sh If you'd like to execute docker without sudo command, you can add your user to docker group. sudo usermod -aG docker \"$(id -un)\" kind kind is a handy tool to run Kubernetes clusters on your local machine. curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.16.0/kind-linux-amd64 chmod +x ./kind sudo mv ./kind /usr/local/bin/kind kubectl Of course, to communicate with Kubernetes, you need to install kubectl. curl -LO \"https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl\" chmod +x kubectl && sudo mv kubectl /usr/local/bin","title":"Installing prerequisites"},{"location":"devenv/#deploying-managers","text":"First, you need to set up a Kubernetes cluster to run controllers. kind create cluster Next, you need to install cert-manager to generate and inject self-signed certificates for controller-manager. kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.9.1/cert-manager.yaml Then, you can build and install managers with these commands. git submodule update --init make controller-manager-docker-build nclet-docker-build gateway-docker-build make controller-manager-kind-push gateway-kind-push Finally, you can deploy managers with this command. make deploy You can check the status of managers with kubectl -n netcon get pods . $ kubectl -n netcon get pods NAME READY STATUS RESTARTS AGE netcon-controller-manager-6b49cb47fb-mn967 2/2 Running 0 9d netcon-gateway-fdccf68c5-x9vpb 1/1 Running 0 7m","title":"Deploying managers"},{"location":"devenv/#optional-setting-up-loadbalancer","text":"If you try managers which require external connectivity like Gateway, you need to set up LoadBalancer. First, you need to install MetalLB. kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.13.7/config/manifests/metallb-native.yaml Then, you need to configure MetalLB. You can configure MetalLB with helper script. ./scripts/generate_metallb_manifest.sh | kubectl apply -f - Finally, you can create LoadBalancer freely. $ cat service.yaml apiVersion: v1 kind: Service metadata: namespace: netcon name: gateway spec: type: LoadBalancer selector: control-plane: gateway ports: - port: 8082 targetPort: 8082 $ kubectl apply -f service.yaml service/gateway created $ kubectl -n netcon get svc NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE gateway LoadBalancer 10.96.196.144 172.18.0.200 8082:30483/TCP 11s netcon-controller-manager-metrics-service ClusterIP 10.96.233.209 <none> 8443/TCP 17d netcon-webhook-service ClusterIP 10.96.239.112 <none> 443/TCP 17d $ curl 172.18.0.200:8082 Gateway for score server ref: https://kind.sigs.k8s.io/docs/user/loadbalancer/","title":"(optional) Setting up LoadBalancer"},{"location":"devenv/#deploying-nclet","text":"After deploying managers successfully, you can install nclet with these command. Note that workers can communicate with Kubernetes controll plane. kind get kubeconfig > kubeconfig sudo mkdir /data && sudo chmod 0777 ./data ./scripts/refresh_nclet.sh Now, you can deploy ContainerLab environment with this system. To try it, apply ./config/samples/netcon_v1alpha1_problemenvironment.yaml .","title":"Deploying nclet"}]}